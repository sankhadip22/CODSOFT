import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3 as db

# ---------------- Functions ---------------- #

def add_task():
    """Add a new task into memory + DB."""
    task = task_entry.get().strip()
    if not task:
        messagebox.showwarning("‚ö†Ô∏è Empty Input", "Please type a task first!")
    else:
        tasks.append(task)
        db_cursor.execute("INSERT INTO tasks VALUES (?)", (task,))
        refresh_list()
        task_entry.delete(0, tk.END)


def delete_task():
    """Remove selected task from memory + DB."""
    try:
        chosen = task_list.get(task_list.curselection())
        if chosen in tasks:
            tasks.remove(chosen)
            db_cursor.execute("DELETE FROM tasks WHERE name=?", (chosen,))
            refresh_list()
    except:
        messagebox.showerror("‚ùå Error", "Please select a task to delete.")


def delete_all_tasks():
    """Clear all tasks with confirmation."""
    confirm = messagebox.askyesno("‚ö†Ô∏è Confirm", "Delete ALL tasks?")
    if confirm:
        tasks.clear()
        db_cursor.execute("DELETE FROM tasks")
        refresh_list()


def search_task():
    """Filter tasks in listbox."""
    query = search_entry.get().strip().lower()
    task_list.delete(0, tk.END)
    for t in tasks:
        if query in t.lower():
            task_list.insert(tk.END, t)


def refresh_list():
    """Update Listbox from memory."""
    task_list.delete(0, tk.END)
    for t in tasks:
        task_list.insert(tk.END, t)


def load_tasks():
    """Load tasks from DB."""
    tasks.clear()
    for row in db_cursor.execute("SELECT name FROM tasks"):
        tasks.append(row[0])


def exit_app():
    """Exit app safely."""
    db_connection.commit()
    db_cursor.close()
    app.quit()


# ---------------- App Setup ---------------- #

app = tk.Tk()
app.title("üåô Stylish To-Do List")
app.geometry("600x450+600+300")
app.resizable(False, False)
app.configure(bg="#222831")

# Database
db_connection = db.connect("tasksDB.db")
db_cursor = db_connection.cursor()
db_cursor.execute("CREATE TABLE IF NOT EXISTS tasks (name TEXT)")

tasks = []

# ---------------- Layout ---------------- #

# Title
title_lbl = tk.Label(app, text="My To-Do List ‚úÖ", font=("Arial", 22, "bold"), bg="#393E46", fg="white")
title_lbl.pack(fill="x", pady=5)

# Input Frame
input_frame = tk.Frame(app, bg="#222831")
input_frame.pack(pady=10)

task_entry = ttk.Entry(input_frame, font=("Consolas", 13), width=30)
task_entry.grid(row=0, column=0, padx=5, pady=5)

add_btn = tk.Button(input_frame, text="‚ûï Add", bg="#00ADB5", fg="white", font=("Arial", 11, "bold"), command=add_task)
add_btn.grid(row=0, column=1, padx=5)

del_btn = tk.Button(input_frame, text="üóë Remove", bg="#FF5722", fg="white", font=("Arial", 11, "bold"), command=delete_task)
del_btn.grid(row=0, column=2, padx=5)

del_all_btn = tk.Button(input_frame, text="‚ö† Remove All", bg="#D32F2F", fg="white", font=("Arial", 11, "bold"), command=delete_all_tasks)
del_all_btn.grid(row=0, column=3, padx=5)

# Search
search_frame = tk.Frame(app, bg="#222831")
search_frame.pack(pady=5)

search_entry = ttk.Entry(search_frame, font=("Consolas", 11), width=25)
search_entry.grid(row=0, column=0, padx=5)

search_btn = tk.Button(search_frame, text="üîç Search", bg="#009688", fg="white", font=("Arial", 11, "bold"), command=search_task)
search_btn.grid(row=0, column=1, padx=5)

# Listbox + Scrollbar
list_frame = tk.Frame(app, bg="#222831")
list_frame.pack(pady=15)

scrollbar = tk.Scrollbar(list_frame, orient=tk.VERTICAL)
task_list = tk.Listbox(
    list_frame, width=45, height=12, font=("Consolas", 12),
    bg="#EEEEEE", fg="black",
    selectbackground="#00ADB5", selectforeground="white",
    yscrollcommand=scrollbar.set
)
scrollbar.config(command=task_list.yview)
scrollbar.pack(side="right", fill="y")
task_list.pack(side="left", fill="both")

# Exit Button
exit_btn = tk.Button(app, text="üö™ Quit", bg="#757575", fg="white", font=("Arial", 12, "bold"), command=exit_app)
exit_btn.pack(pady=10)

# ---------------- Load Data ---------------- #
load_tasks()
refresh_list()

app.mainloop()

