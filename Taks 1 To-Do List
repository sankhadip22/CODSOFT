import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3 as db

# ---------------- Core Functions ---------------- #

def add_item():
    """Insert a new item into the list and database."""
    entry_text = input_box.get().strip()
    if not entry_text:
        messagebox.showwarning("Empty Field", "Please enter a task before adding.")
    else:
        todo_items.append(entry_text)
        db_cursor.execute("INSERT INTO todo_table VALUES (?)", (entry_text,))
        update_listbox()
        input_box.delete(0, tk.END)


def update_listbox():
    """Refresh the Listbox display."""
    clear_listbox()
    for itm in todo_items:
        listbox_widget.insert(tk.END, itm)


def remove_item():
    """Delete the chosen item from both memory and database."""
    try:
        chosen = listbox_widget.get(listbox_widget.curselection())
        if chosen in todo_items:
            todo_items.remove(chosen)
            update_listbox()
            db_cursor.execute("DELETE FROM todo_table WHERE task_name = ?", (chosen,))
    except:
        messagebox.showerror("Selection Error", "No task was selected to delete.")


def remove_everything():
    """Clear all tasks after confirmation."""
    confirm_box = messagebox.askyesno("Confirm Deletion", "Do you want to remove all tasks?")
    if confirm_box:
        todo_items.clear()
        db_cursor.execute("DELETE FROM todo_table")
        update_listbox()


def clear_listbox():
    """Wipe the Listbox content."""
    listbox_widget.delete(0, tk.END)


def quit_program():
    """Exit program safely."""
    print("Tasks at exit:", todo_items)
    app_window.destroy()


def fetch_from_db():
    """Retrieve tasks stored in the database."""
    todo_items.clear()
    for row in db_cursor.execute("SELECT task_name FROM todo_table"):
        todo_items.append(row[0])


# ---------------- Application Setup ---------------- #

if __name__ == "__main__":

    # Main Window
    app_window = tk.Tk()
    app_window.title("Daily Planner - Clean Version")
    app_window.geometry("540x470+650+250")
    app_window.resizable(False, False)
    app_window.configure(bg="#FFF8DC")

    # Database Connection
    db_connection = db.connect("plannerDB.db")
    db_cursor = db_connection.cursor()
    db_cursor.execute("CREATE TABLE IF NOT EXISTS todo_table (task_name TEXT)")

    todo_items = []

    # Layout Frames
    title_frame = tk.Frame(app_window, bg="teal")
    control_frame = tk.Frame(app_window, bg="teal")
    display_frame = tk.Frame(app_window, bg="teal")

    title_frame.pack(fill="x")
    control_frame.pack(side="left", expand=True, fill="both", padx=5, pady=5)
    display_frame.pack(side="right", expand=True, fill="both", padx=5, pady=5)

    # Title Label
    title_label = ttk.Label(
        title_frame,
        text="üìã My Daily Planner",
        font=("Helvetica", 26, "bold"),
        background="teal",
        foreground="white"
    )
    title_label.pack(pady=10)

    # Input Label
    input_label = ttk.Label(
        control_frame,
        text="Add New Task:",
        font=("Helvetica", 12, "bold"),
        background="teal",
        foreground="white"
    )
    input_label.place(x=25, y=30)

    # Input Box
    input_box = ttk.Entry(
        control_frame,
        font=("Consolas", 12),
        width=22
    )
    input_box.place(x=25, y=65)

    # Buttons
    add_btn = ttk.Button(control_frame, text="‚ûï Add", width=20, command=add_item)
    del_btn = ttk.Button(control_frame, text="üóëÔ∏è Remove", width=20, command=remove_item)
    del_all_btn = ttk.Button(control_frame, text="‚ö†Ô∏è Remove All", width=20, command=remove_everything)
    quit_btn = ttk.Button(control_frame, text="üö™ Quit", width=20, command=quit_program)

    add_btn.place(x=25, y=110)
    del_btn.place(x=25, y=150)
    del_all_btn.place(x=25, y=190)
    quit_btn.place(x=25, y=230)

    # Listbox
    listbox_widget = tk.Listbox(
        display_frame,
        width=28,
        height=15,
        selectmode=tk.SINGLE,
        background="white",
        foreground="black",
        selectbackground="darkcyan",
        selectforeground="white"
    )
    listbox_widget.pack(padx=15, pady=15)

    # Load from DB
    fetch_from_db()
    update_listbox()

    # Run App
    app_window.mainloop()

    # Save & Close DB
    db_connection.commit()
    db_cursor.close()
